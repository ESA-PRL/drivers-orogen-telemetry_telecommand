name "telemetry_telecommand"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
using_library "telemetry_telecommand"
# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
import_types_from "base"
import_types_from "telemetry_telecommandTypes.hpp"
import_types_from "telemetry_telecommand/Messages.hpp"
import_types_from "telemetry_telecommand/ctrl_state.h"
import_types_from "temperature/temperatureTypes.hpp"
import_types_from "locomotion_switcher/locomotion_switcherTypes.hpp"
import_types_from "fdir/fdirTypes.hpp"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
# import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the telemetry_telecommand namespace.
task_context "Task" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    # A configuration property (here, a std::string). Its value can be retrieved
    # in the C++ code with # _config_value.get() and _config_value.set(new_value).
    property "activeMQ_brokerURI", "/std/string"
    property "initial_pose", "/base/samples/RigidBodyState"
    property "productsFolder", "/std/string"  
    property "rover", "RoverName"  
    property "isMastDeployed", "bool"  

    # An input port, i.e. an object from which the component gets data from
    # other components' outputs
    #
    # Data can be retrieved using _input.read(value), which returns true if data
    # was available, and false otherwise. _input.connected() returns if this
    # input is connected to an output or not.
    input_port "current_pose", "/base/samples/RigidBodyState"
    input_port "current_ptu", "base/samples/Joints"
    input_port "current_pan", "double"
    input_port "current_tilt", "double"
    input_port "current_imu", "base/samples/RigidBodyState"
    input_port "current_bema", "base/samples/Joints"
    input_port "joint_samples", "base/samples/Joints"
    input_port "motor_temperatures", "/temperature/samples/Temperature"
    input_port "trajectory_status", "int"
    input_port "image_mast_filename", "std/string"
    input_port "image_front_left_filename", "std/string"
    input_port "image_front_right_filename", "std/string"
    input_port "image_back_left_filename", "std/string"
    input_port "image_back_right_filename", "std/string"
    input_port "image_haz_front_left_filename", "std/string"
    input_port "image_haz_front_right_filename", "std/string"
    input_port "dem_mast_filename", "std/string"
    input_port "dem_front_filename", "std/string"
    input_port "dem_back_filename", "std/string"
    input_port "dem_haz_front_filename", "std/string"
    input_port "dist_mast_filename", "std/string"
    input_port "dist_front_filename", "std/string"
    input_port "dist_back_filename", "std/string"
    input_port "dist_haz_front_filename", "std/string"
    input_port "telemetry_product", "telemetry_telecommand/messages/Telemetry"
    input_port "fdir_state", "fdir/FdirState"
    # An output port, i.e. an object to which the component pushes data so that
    # it is transmitted to other components' inputs
    #
    # Data can be written using _output.write(value). _output.connected() returns
    # if this output is connected to an input or not.
    output_port "update_pose", "/base/samples/RigidBodyState"
    output_port "bema_command", "double"
    output_port "walking_command_front", "double"
    output_port "walking_command_rear", "double"
    output_port "locomotion_command", "base/commands/Motion2D"
    output_port "trajectory", "/std/vector<base/Waypoint>"
    output_port "trajectory_speed", "double"
    output_port "ptu_command", "base/commands/Joints"
    output_port "mast_pan", "double"
    output_port "mast_tilt", "double"
    output_port "panorama_tilt", "double"
    output_port "pancam_360_trigger", "telemetry_telecommand/messages/Telecommand"
    output_port "mast_trigger", "telemetry_telecommand/messages/Telecommand"
    output_port "pancam_trigger", "telemetry_telecommand/messages/Telecommand"
    output_port "front_trigger", "telemetry_telecommand/messages/Telecommand"
    output_port "navcam_trigger", "telemetry_telecommand/messages/Telecommand"
    output_port "rear_trigger", "telemetry_telecommand/messages/Telecommand"
    output_port "haz_front_trigger", "telemetry_telecommand/messages/Telecommand"
    output_port "loccam_trigger", "telemetry_telecommand/messages/Telecommand"
    output_port "tof_trigger", "telemetry_telecommand/messages/Telecommand"
    output_port "lidar_trigger", "telemetry_telecommand/messages/Telecommand"
    output_port "telecommand_product", "telemetry_telecommand/messages/Telecommand"
    output_port("locomotion_mode", "locomotion_switcher/LocomotionMode").doc("Locomotion mode, to be forwarded to locomotion switcher to select the desired locomotion mode in non joystick command")


    transformer do
        transform "left_camera_pancam", "lab"
        transform "right_camera_pancam", "lab"
        transform "left_camera_navcam", "lab"
        transform "right_camera_navcam", "lab"
        transform "left_camera_loccam", "lab"
        transform "right_camera_loccam", "lab"
        transform "left_camera_navcam_back", "lab"
        transform "right_camera_navcam_back", "lab"
        transform "left_camera_bb3", "lab"
        transform "left_camera_bb2", "lab"
        transform "right_camera_bb2", "lab"
        transform "lidar", "lab"
        transform "tof", "lab"
        #align_port "current_pose"
        max_latency 2.0
    end

    # If you want that component's updateHook() to be executed when the "input"
    # port gets data, uncomment this and comment the 'periodic' line
    # port_driven "input"
    # By default, the task will be periodic with a period of 0.1
    periodic 0.1
end

